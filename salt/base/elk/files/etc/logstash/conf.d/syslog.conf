input {
  tcp {
    port => 5000
    type => syslog
  }
  udp {
    port => 5000
    type => syslog
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match => {
        "message" => [
          "%{WORD:syslogtype} dns: query from %{IP:client}: #%{NUMBER:requestid} %{URIHOST:nsname}. %{WORD:nstype}",
          "system,%{WORD:syslogtype},.*? login failure for user %{USERNAME:username} from %{IP:srcip} via %{WORD:via}",
          "%{WORD:syslogtype},info firewall: %{WORD:filter}: in:%{DATA:in} out:%{DATA:out}, src-mac %{MAC:srcmac}, proto %{DATA:proto}, %{IP:srcip}:%{POSINT:srcport}->%{IP:dstip}:%{POSINT:dstport}, len %{NUMBER:len}"
        ]

      }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }

   if [srcip]  {
      geoip {
        source => "srcip"
        target => "geoip"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate {
        convert => [ "[geoip][coordinates]", "float" ]
      }
    }

    syslog_pri { }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
}
output {
  elasticsearch {
    host => ["localhost"]
    port => 9200
    manage_template => true
    workers => 1
    flush_size => 1000
    idle_flush_time => 5
    index => "logstash-%{+YYYY.MM.dd}"
    codec => "plain"
    template_name => "logstash"
    template_overwrite => false
    protocol => "http"
  }
  file {
    #message_format => "%{[time]} | %{[severity]} : /%{[thread]}/ %{[loggername]} (%{[sourcemethodname]}) - %{[message]}"
    path => "/var/logstash/output.log"
  }
}